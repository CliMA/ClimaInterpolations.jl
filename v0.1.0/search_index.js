var documenterSearchIndex = {"docs":
[{"location":"BilinearInterpolation/#BilinearInterpolation","page":"BilinearInterpolation","title":"BilinearInterpolation","text":"","category":"section"},{"location":"BilinearInterpolation/","page":"BilinearInterpolation","title":"BilinearInterpolation","text":"CurrentModule = ClimaInterpolations.BilinearInterpolation","category":"page"},{"location":"BilinearInterpolation/","page":"BilinearInterpolation","title":"BilinearInterpolation","text":"Bilinear\ninterpolatebilinear!\nset_source_range!\nget_stencil_left_idx","category":"page"},{"location":"BilinearInterpolation/#ClimaInterpolations.BilinearInterpolation.Bilinear","page":"BilinearInterpolation","title":"ClimaInterpolations.BilinearInterpolation.Bilinear","text":"Bilinear{V,I}\n\nThis struct stores the source and target grids for bilinear interpolation on a rectangular grid. Indexes specifying the location of the target points in the source grid are also stored for  enabling efficient implementation of bilinear interpolation.\n\nFields\n\nsourcex: Source grid in x direction (nsourcex)\nsourcey: Source grid in y direction (nsourcey)\ntargetx: Target grid in x direction (ntargetx)\ntargety: Target grid in y direction (ntargety)\nstartx: left index of location of a target x grid point in source x grid\nstarty: left index of location of a target y grid point in source y grid\n\n\n\n\n\n","category":"type"},{"location":"BilinearInterpolation/#ClimaInterpolations.BilinearInterpolation.interpolatebilinear!","page":"BilinearInterpolation","title":"ClimaInterpolations.BilinearInterpolation.interpolatebilinear!","text":"interpolatebilinear!(\n    ftarget::AbstractArray{FT,N},\n    bilinear::B,\n    fsource::AbstractArray{FT,N},\n) where {FT,N,B}\n\nInterpolate fsource, defined on source grid, onto the target grid. The horizontal source and target grids are defined in bilinear. Here fsource is an N-dimensional array where the last two dimensions are assumed to be horizontal dimensions.\n\nFor example, fsource can be of size [n1, n2..., nx, ny], where nx and ny are the horizontal dimensions. Single horizontal level is also supported. The number of horizontal levels should be same for both source and target arrays.\n\nhttps://en.wikipedia.org/wiki/Bilinear_interpolation\n\n\n\n\n\n","category":"function"},{"location":"BilinearInterpolation/#ClimaInterpolations.BilinearInterpolation.set_source_range!","page":"BilinearInterpolation","title":"ClimaInterpolations.BilinearInterpolation.set_source_range!","text":"set_source_range!(\n    start::AbstractVector{I},\n    source::AbstractVector{FT},\n    target::AbstractVector{FT},\n) where {I, FT}\n\nThis function populates the 1D integer array start which provides the left indices of  locations of target points inside the source grid specified by the 1D array source.\n\n\n\n\n\n","category":"function"},{"location":"BilinearInterpolation/#ClimaInterpolations.BilinearInterpolation.get_stencil_left_idx","page":"BilinearInterpolation","title":"ClimaInterpolations.BilinearInterpolation.get_stencil_left_idx","text":"get_stencil_left_idx(alg::Linear, sourcegrid, targetpoint; first = 1)\n\nReturn the left index of location of targetpoint point in sourcegrid grid.\n\n\n\n\n\n","category":"function"},{"location":"Interpolation1D/#Interpolation1D","page":"Interpolation1D","title":"Interpolation1D","text":"","category":"section"},{"location":"Interpolation1D/","page":"Interpolation1D","title":"Interpolation1D","text":"CurrentModule = ClimaInterpolations.Interpolation1D","category":"page"},{"location":"Interpolation1D/","page":"Interpolation1D","title":"Interpolation1D","text":"interpolate1d!\ninterpolate_column!\nInterpolate1D\nget_stencil\nOrder1D\nExtrapolate1D\nLinear\nFlat\nLinearExtrapolation","category":"page"},{"location":"Interpolation1D/#ClimaInterpolations.Interpolation1D.interpolate1d!","page":"Interpolation1D","title":"ClimaInterpolations.Interpolation1D.interpolate1d!","text":"interpolate1d!(\n    ftarget::AbstractArray{FT, N},\n    xsource::AbstractArray{FT, NSG},\n    xtarget::AbstractArray{FT, NTG},\n    fsource::AbstractArray{FT, N},\n    order,\n    extrapolate = Flat(),\n    reverse = false,\n) where {FT, N, NSG, NTG}\n\nInterpolate fsource, defined on grid xsource, onto the xtarget grid. Here the source grid xsource is an N-dimensional array of columns. The first dimension is assumed to be the column dimension.  Each column can have a different grid. It is assumed that both xsource and xtarget are either mononically increasing (reverse = false) or decreasing (reverse = true).\n\n\n\n\n\n","category":"function"},{"location":"Interpolation1D/#ClimaInterpolations.Interpolation1D.interpolate_column!","page":"Interpolation1D","title":"ClimaInterpolations.Interpolation1D.interpolate_column!","text":"interpolate_column!(\n    ftarget,\n    xsource,\n    xtarget,\n    fsource,\n    order,\n    extrapolate;\n    reverse = false,\n)\n\nInterpolate fsource, defined on column (1D) grid xsource, onto the xtarget grid. It is assumed that both xsource and xtarget are either mononically increasing  (reverse = false) or decreasing (reverse = true). This is a convenience function  primarily intended for internal use.\n\n\n\n\n\n","category":"function"},{"location":"Interpolation1D/#ClimaInterpolations.Interpolation1D.Interpolate1D","page":"Interpolation1D","title":"ClimaInterpolations.Interpolation1D.Interpolate1D","text":"Interpolate1D{V, IO, EO}\n\nThis struct stores the source grid (xsource), function defined on the source grid (fsource), interpolation order and extrapolation order for 1-dimensional interpolation. This struct is designed to be be used in broadcasting calls for 1-dimensional interpolation.\n\nE.g.: \n\nitp = Interpolate1D(             xsource,             fsource,             interpolationorder = Linear(),             extrapolationorder = extrapolation,         )\n\nftarget = itp.(xtarget)\n\n\n\n\n\n","category":"type"},{"location":"Interpolation1D/#ClimaInterpolations.Interpolation1D.get_stencil","page":"Interpolation1D","title":"ClimaInterpolations.Interpolation1D.get_stencil","text":"get_stencil(alg::Linear, xsource, xtarget; first = 1, extrapolate = Flat(), reverse = false)\n\nThis function returns the starting and ending points, in the source grid xsource, for the stencil needed for linear interpolation. If xtarget is outside the range of xsource, this returns the  corresponding stencil needed for extrapolation. The stencil specification is characterized by [st, en]  where st is the starting point and en is the ending point of the stencil in the target grid. This function returns the tuple (st, en). Linear and Flat extrapolation schemes are supported at the  boundaries. The argument first can be used to speedup the search, by providing a more efficient starting point for the search.\n\n\n\n\n\n","category":"function"},{"location":"Interpolation1D/#ClimaInterpolations.Interpolation1D.Order1D","page":"Interpolation1D","title":"ClimaInterpolations.Interpolation1D.Order1D","text":"Order1D\n\nAbstract type for interpolation schemes.\n\n\n\n\n\n","category":"type"},{"location":"Interpolation1D/#ClimaInterpolations.Interpolation1D.Extrapolate1D","page":"Interpolation1D","title":"ClimaInterpolations.Interpolation1D.Extrapolate1D","text":"Extrapolate1D\n\nAbstract type for extrapolation schemes.\n\n\n\n\n\n","category":"type"},{"location":"Interpolation1D/#ClimaInterpolations.Interpolation1D.Linear","page":"Interpolation1D","title":"ClimaInterpolations.Interpolation1D.Linear","text":"Linear <: Order1D\n\nUse linear interpolation.\n\n\n\n\n\n","category":"type"},{"location":"Interpolation1D/#ClimaInterpolations.Interpolation1D.Flat","page":"Interpolation1D","title":"ClimaInterpolations.Interpolation1D.Flat","text":"Flat <: Extrapolate1D\n\nUse flat extrapolation.\n\n\n\n\n\n","category":"type"},{"location":"Interpolation1D/#ClimaInterpolations.Interpolation1D.LinearExtrapolation","page":"Interpolation1D","title":"ClimaInterpolations.Interpolation1D.LinearExtrapolation","text":"LinearExtrapolation <: Extrapolate1D\n\nUse linear extrapolation.\n\n\n\n\n\n","category":"type"},{"location":"#ClimaInterpolations.jl","page":"Home","title":"ClimaInterpolations.jl","text":"","category":"section"},{"location":"#Interpolation1D","page":"Home","title":"Interpolation1D","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"interpolate1d! function can be used to perform linear interpolation on a single column on or a collection of columns. Both single threaded CPU and NVIDIA GPU platforms are supported. Examples for single column and multiple column cases are presented below.","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Example for interpolating a single column on a CPU:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import ClimaInterpolations.Interpolation1D:\n    Linear, interpolate1d!, Flat\n\nFT, DA = Float32, Array\nxminsource, xmaxsource, nsource, ntarget = FT(0), FT(2Ï€), 150, 200\nxmintarget, xmaxtarget = xminsource, xmaxsource\n\nxsource = DA{FT}(range(xminsource, xmaxsource, length = nsource))\nxtarget = DA{FT}(range(xmintarget, xmaxtarget, length = ntarget))\n\nfsource = DA(sin.(xsource)) # function defined on source grid\nftarget = DA(zeros(FT, ntarget)) # allocated function on target grid\ninterpolate1d!(ftarget, xsource, xtarget, fsource, Linear(), Flat())","category":"page"},{"location":"","page":"Home","title":"Home","text":"In-place interpolation is also supported on reverse (monotonically decreasing grids). Please note that both the source and target grids need to be either monotonically increasing (default, reverse=false) or monotonically decreasing (reverse=true).","category":"page"},{"location":"","page":"Home","title":"Home","text":"# In-place interpolation on a reversed grid\n\nimport ClimaInterpolations.Interpolation1D:\n    Linear, interpolate1d!, Flat\n\nFT, DA = Float32, Array\nxminsource, xmaxsource, nsource, ntarget = FT(0), FT(2Ï€), 150, 200\nxmintarget, xmaxtarget = xminsource, xmaxsource\n\nxsource = DA{FT}(reverse(range(xminsource, xmaxsource, length = nsource)))\nxtarget = DA{FT}(reverse(range(xmintarget, xmaxtarget, length = ntarget)))\n\nfsource = DA(sin.(xsource)) # function defined on source grid\nftarget = DA(zeros(FT, ntarget)) # allocated function on target grid\ninterpolate1d!(ftarget, xsource, xtarget, fsource, Linear(), Flat(), reverse = true)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example for interpolating multiple columns on a CPU:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import ClimaInterpolations.Interpolation1D:\n    Linear, interpolate1d!, Flat\n\nFT, DA = Float32, Array\nxminsource, xmaxsource, nsource, ntarget, nlat, nlon = FT(0), FT(2Ï€), 150, 200, 1280, 640\nxmintarget, xmaxtarget = xminsource, xmaxsource\n\nxsource = DA{FT}(range(xminsource, xmaxsource, length = nsource))\nxtarget = DA{FT}(range(xmintarget, xmaxtarget, length = ntarget))\n\nxsourcecols = DA(repeat(xsource, 1, nlon, nlat))\nxtargetcols = DA(repeat(xtarget, 1, nlon, nlat))\nfsourcecols = DA(sin.(xsourcecols))\nftargetcols = DA(zeros(FT, ntarget, nlon, nlat))\n\n# interpolate with different source grid and target grids for all columns\ninterpolate1d!(ftargetcols, xsourcecols, xtargetcols, fsourcecols, Linear(), Flat())\n\n# interpolate with same source and target grids for all columns\ninterpolate1d!(ftargetcols, xsource, xtarget, fsourcecols, Linear(), Flat())\n\n# interpolate with same source grid but different target grids for all columns\ninterpolate1d!(ftargetcols, xsource, xtargetcols, fsourcecols, Linear(), Flat())\n\n# interpolate with same target grid but different source grids for all columns\ninterpolate1d!(ftargetcols, xsourcecols, xtarget, fsourcecols, Linear(), Flat())","category":"page"},{"location":"","page":"Home","title":"Home","text":"The above examples can be run on NVIDIA GPUs by setting DA = CuArray.","category":"page"},{"location":"","page":"Home","title":"Home","text":"1D interpolation can also be invoked using a broadcasting call.","category":"page"},{"location":"","page":"Home","title":"Home","text":"import ClimaInterpolations.Interpolation1D:\n    Linear, Interpolate1D, interpolate1d!, Flat\n\nFT, DA = Float32, Array\nxminsource, xmaxsource, nsource, ntarget = FT(0), FT(2Ï€), 150, 200\nxmintarget, xmaxtarget = xminsource, xmaxsource\n\nxsource = DA{FT}(range(xminsource, xmaxsource, length = nsource))\nxtarget = DA{FT}(range(xmintarget, xmaxtarget, length = ntarget))\n\nfsource = DA(sin.(xsource)) # function defined on source grid\n\nitp = Interpolate1D(\n        xsource,\n        fsource,\n        interpolationorder = Linear(),\n        extrapolationorder = Flat(),\n    )\nftarget = itp.(xtarget)","category":"page"},{"location":"#BilinearInterpolation","page":"Home","title":"BilinearInterpolation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"interpolatebilinear! function can be used to perform bilinear interpolation on a single level on or a multiple horizontal levels of a rectangular grid. Both single threaded CPU and NVIDIA GPU platforms are supported. Examples for single level and multiple level cases are presented below.","category":"page"},{"location":"#Example-2","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Example for using bilinear interpolation a single level on a CPU:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# This example demonstrates use of bilinear interpolation for interpolating from \n# a source grid of dimension (nsourcex x nsourcey) to a target grid of dimension (ntargetx x ntargety)\n\nimport ClimaInterpolations.BilinearInterpolation: Bilinear, interpolatebilinear!\nimport ClimaInterpolations.Interpolation1D:\n    Linear, interpolate1d!, Flat\n\nFT, DA = Float32, Array\n\nxminsource, xmaxsource, nsourcex, ntargetx = FT(0), FT(3Ï€), 2560, 1280\nxmintarget, xmaxtarget = xminsource, xmaxsource\n\nymin, ymax, nsourcey, ntargety = FT(0), FT(2Ï€), 2400, 1200\nymintarget, ymaxtarget = ymin, ymax\n\nxsource = DA{FT}(range(xminsource, xmaxsource, length = nsourcex))\nxtarget = DA{FT}(range(xmintarget, xmaxtarget, length = ntargetx))\n\nysource = DA{FT}(range(ymin, ymax, length = nsourcey))\nytarget = DA{FT}(range(ymintarget, ymaxtarget, length = ntargety))\n\nsourcemesh = (\n    x = DA([xsource[i] for i in 1:nsourcex, j in 1:nsourcey]),\n    y = DA([ysource[j] for i in 1:nsourcex, j in 1:nsourcey]),\n) # Define function to be interpolated on the source grid\n\n\nfsource = sin.(Ï€ .* sourcemesh.x) .* cos.(Ï€ .* sourcemesh.y) # function defined on source grid\nftarget = DA(zeros(FT, ntargetx, ntargety)) # allocated function on target grid\n\n# Construct a `Bilinear` object containing the source and target grid information,\n# and use it to perform the interpolation\nbilinear = Bilinear(xsource, ysource, xtarget, ytarget)\ninterpolatebilinear!(ftarget, bilinear, fsource)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example for using bilinear interpolation on multiple horizontal levels on a CPU:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# This example demonstrates use of multi-level bilinear interpolation for interpolating from \n# a source grid of dimension (nlevels x nsourcex x nsourcey) to a target grid of dimension (nlevels x ntargetx x ntargety)\n\nimport ClimaInterpolations.BilinearInterpolation: Bilinear, interpolatebilinear!\nimport ClimaInterpolations.Interpolation1D:\n    Linear, interpolate1d!, Flat\n\nFT, DA = Float32, Array\n\nxminsource, xmaxsource, nsourcex, ntargetx = FT(0), FT(3Ï€), 2560, 1280\nxmintarget, xmaxtarget = xminsource, xmaxsource\n\nymin, ymax, nsourcey, ntargety = FT(0), FT(2Ï€), 2400, 1200\nymintarget, ymaxtarget = ymin, ymax\n\nzmin, zmax, nlevels = FT(0), FT(1), 128\n\nxsource = DA{FT}(range(xminsource, xmaxsource, length = nsourcex))\nxtarget = DA{FT}(range(xmintarget, xmaxtarget, length = ntargetx))\n\nysource = DA{FT}(range(ymin, ymax, length = nsourcey))\nytarget = DA{FT}(range(ymintarget, ymaxtarget, length = ntargety))\n\nz = DA{FT}(range(zmin, zmax, length = nlevels))\n\n# build a sample function defined on source grid for bilinear interpolation\n\nsourcemesh = (\n    x = DA([\n        xsource[j] for i in 1:nlevels, j in 1:nsourcex,\n        k in 1:nsourcey\n    ]),\n    y = DA([\n        ysource[k] for i in 1:nlevels, j in 1:nsourcex,\n        k in 1:nsourcey\n    ]),\n    z = DA([\n        z[i] for i in 1:nlevels, j in 1:nsourcex, k in 1:nsourcey\n    ]),\n)\n\n\nfsource = sin.(Ï€ .* sourcemesh.x) .* cos.(Ï€ .* sourcemesh.y) .* sourcemesh.z # function defined on source grid\nftarget = DA(zeros(FT, nlevels, ntargetx, ntargety)) # allocated function on target grid\n\n# Construct a `Bilinear` object containing the source and target grid information,\n# and use it to perform the interpolation\nbilinear = Bilinear(xsource, ysource, xtarget, ytarget)\ninterpolatebilinear!(ftarget, bilinear, fsource)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The above examples can be run on NVIDIA GPUs by setting DA = CuArray.","category":"page"}]
}
